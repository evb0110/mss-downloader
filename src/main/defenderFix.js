/**
 * Windows Defender Auto-Exclusion Module
 * v1.4.150 - Simplified and fixed encoding issues
 * 
 * Provides manual fix instructions instead of auto-elevation
 * which causes encoding and permission issues
 */

const { app, dialog, shell } = require('electron');
const path = require('path');
const fs = require('fs');

class WindowsDefenderFix {
  constructor() {
    this.isWindows = process.platform === 'win32';
    this.configPath = path.join(app.getPath('userData'), 'defender-fix-applied.json');
    this.scriptPath = path.join(process.resourcesPath || path.dirname(app.getPath('exe')), 
                                '.devkit', 'scripts', 'windows-defender-fix.ps1');
  }

  /**
   * Check if fix was already applied
   */
  async wasFixApplied() {
    try {
      if (fs.existsSync(this.configPath)) {
        const config = JSON.parse(fs.readFileSync(this.configPath, 'utf8'));
        // Re-check monthly
        const daysSinceApplied = (Date.now() - config.appliedAt) / (1000 * 60 * 60 * 24);
        return daysSinceApplied < 30;
      }
    } catch (e) {
      console.error('Error checking defender fix status:', e);
    }
    return false;
  }

  /**
   * Mark fix as applied
   */
  markFixApplied() {
    try {
      fs.writeFileSync(this.configPath, JSON.stringify({
        appliedAt: Date.now(),
        version: app.getVersion(),
        method: 'manual'
      }, null, 2));
    } catch (e) {
      console.error('Error saving defender fix status:', e);
    }
  }

  /**
   * Create PowerShell script for manual execution
   */
  createManualFixScript() {
    const scriptContent = `# Windows Defender Exclusion Script for MSS-Downloader
# Generated by v${app.getVersion()}
# Run this script as Administrator in PowerShell

Write-Host "Adding Windows Defender exclusions for MSS-Downloader..." -ForegroundColor Green

# Application paths
$appPaths = @(
    "${app.getPath('exe')}",
    "${app.getPath('userData')}",
    "${path.dirname(app.getPath('exe'))}",
    "${process.resourcesPath || ''}"
)

# Process names
$processes = @("electron.exe", "mss-downloader.exe", "MSS-Downloader.exe", "${path.basename(app.getPath('exe'))}")

# Add path exclusions
foreach ($path in $appPaths) {
    if ($path -and (Test-Path $path)) {
        try {
            Add-MpPreference -ExclusionPath $path -ErrorAction Stop
            Write-Host "Added path: $path" -ForegroundColor Green
        } catch {
            Write-Host "Path already excluded or error: $path" -ForegroundColor Yellow
        }
    }
}

# Add process exclusions (ONE BY ONE - critical!)
foreach ($proc in $processes) {
    try {
        Add-MpPreference -ExclusionProcess $proc -ErrorAction Stop
        Write-Host "Added process: $proc" -ForegroundColor Green
    } catch {
        Write-Host "Process already excluded or error: $proc" -ForegroundColor Yellow
    }
}

# Add file extensions
@(".asar", ".node") | ForEach-Object {
    try {
        Add-MpPreference -ExclusionExtension $_ -ErrorAction Stop
        Write-Host "Added extension: $_" -ForegroundColor Green
    } catch {
        Write-Host "Extension already excluded: $_" -ForegroundColor Yellow
    }
}

Write-Host "\\nWindows Defender exclusions have been configured!" -ForegroundColor Green
Write-Host "MSS-Downloader should now run without interference." -ForegroundColor Cyan
Read-Host "Press Enter to exit"`;

    // Save script to temp location
    const tempScriptPath = path.join(app.getPath('temp'), 'mss-defender-fix.ps1');
    try {
      fs.writeFileSync(tempScriptPath, scriptContent, { encoding: 'utf8' });
      return tempScriptPath;
    } catch (e) {
      console.error('Failed to create temp script:', e);
      return null;
    }
  }

  /**
   * Show instructions for manual fix
   */
  async showManualInstructions(scriptPath) {
    const result = await dialog.showMessageBox({
      type: 'warning',
      title: 'Windows Defender Manual Configuration Required',
      message: 'Windows Defender exclusions need to be added manually',
      detail: `To prevent Windows Defender from interfering with MSS-Downloader:

1. A PowerShell script has been created at:
   ${scriptPath}

2. Right-click the script and select "Run with PowerShell"
3. If prompted, allow it to run as Administrator
4. The script will add all necessary exclusions

Alternatively, open PowerShell as Administrator and run:
${scriptPath}`,
      buttons: ['Open Script Location', 'Skip for Now'],
      defaultId: 0,
      cancelId: 1
    });

    if (result.response === 0) {
      // Open the folder containing the script
      shell.showItemInFolder(scriptPath);
      
      // Show additional help
      dialog.showMessageBox({
        type: 'info',
        title: 'Instructions',
        message: 'Script location opened',
        detail: `Right-click "mss-defender-fix.ps1" and select:
- "Run with PowerShell" 
- Or open PowerShell as Admin and drag the file into it

After running the script, Windows Defender will stop interfering with MSS-Downloader.`,
        buttons: ['OK']
      });
    }
  }

  /**
   * Check if running from quarantine recovery
   */
  isRecoveringFromQuarantine() {
    // Check for signs that app was restored from quarantine
    const markers = [
      !fs.existsSync(path.join(app.getPath('userData'), 'config.json')),
      process.argv.includes('--restored'),
      process.env.DEFENDER_RESTORED === '1'
    ];
    
    return markers.some(m => m);
  }

  /**
   * Initialize the defender fix
   */
  async initialize() {
    if (!this.isWindows) return;

    try {
      // Check if already handled
      if (await this.wasFixApplied()) {
        console.log('Windows Defender fix already applied recently');
        return;
      }

      // Don't show on every startup - only first run or after issues
      const isFirstRun = !fs.existsSync(path.join(app.getPath('userData'), 'config.json'));
      const isRecovering = this.isRecoveringFromQuarantine();
      
      if (!isFirstRun && !isRecovering) {
        console.log('Not first run, skipping Defender prompt');
        return;
      }

      // Delay slightly to not interfere with startup
      setTimeout(async () => {
        const scriptPath = this.createManualFixScript();
        if (scriptPath) {
          await this.showManualInstructions(scriptPath);
          // Mark as handled even if user skips
          this.markFixApplied();
        }
      }, 3000);
      
    } catch (error) {
      console.error('Defender fix initialization error:', error);
      // Don't show errors to user - fail silently
    }
  }
}

module.exports = WindowsDefenderFix;