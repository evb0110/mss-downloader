name: Build and Notify on Version Change

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: read
  actions: read
  checks: write
  deployments: write
  issues: write
  packages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if version changed
        id: check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged"
          fi
          
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

  build-and-notify:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Build Windows AMD64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run dist:win:x64
      
      - name: Build Windows ARM64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run dist:win:arm
      
      - name: Create GitHub Release with all builds
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # List available build files for debugging
          echo "=== Available build files ==="
          ls -la release/ || echo "No release directory found"
          
          # Simple approach: create release and upload files in one step
          # Find AMD64 build
          AMD64_FILE=$(find release -name "*Setup*${{ needs.check-version.outputs.version }}*x64*.exe" | head -1)
          ARM64_FILE=$(find release -name "*Setup*${{ needs.check-version.outputs.version }}*arm64*.exe" | head -1)
          
          echo "Found AMD64: $AMD64_FILE"
          echo "Found ARM64: $ARM64_FILE"
          
          # Build file list for upload
          FILES_TO_UPLOAD=""
          if [ -f "$AMD64_FILE" ]; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD $AMD64_FILE"
          fi
          if [ -f "$ARM64_FILE" ]; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD $ARM64_FILE"
          fi
          
          if [ -n "$FILES_TO_UPLOAD" ]; then
            # Delete existing release if it exists
            gh release delete "v${{ needs.check-version.outputs.version }}" --yes || true
            
            # Create release with files
            gh release create "v${{ needs.check-version.outputs.version }}" \
              --title "MSS Downloader v${{ needs.check-version.outputs.version }}" \
              --notes "Automated release for version ${{ needs.check-version.outputs.version }}" \
              $FILES_TO_UPLOAD
            
            echo "Release created with files: $FILES_TO_UPLOAD"
          else
            echo "No build files found to upload"
            exit 1
          fi
      
      - name: Install Telegram bot dependencies
        run: |
          cd telegram-bot
          npm install
      
      - name: Send Multiplatform Telegram notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd telegram-bot
          npm run send-multiplatform-build
      
      - name: Upload Windows AMD64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64-build-v${{ needs.check-version.outputs.version }}
          path: release/*x64*.exe
          
      - name: Upload Windows ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-arm64-build-v${{ needs.check-version.outputs.version }}
          path: release/*arm64*.exe