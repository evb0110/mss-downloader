name: Build and Notify on Version Change

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  packages: read

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check if version changed
        id: check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged"
          fi
          
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

  build-and-notify:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Build Windows AMD64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run dist:win:x64
      
      - name: Build Windows ARM64
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run dist:win:arm
      
      - name: Build Linux AppImage
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run dist:linux
      
      - name: Install Telegram bot dependencies
        run: |
          cd telegram-bot
          npm install
      
      - name: Send Multiplatform Telegram notification
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd telegram-bot
          node send-multiplatform-build.js
      
      - name: Upload Windows AMD64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64-build-v${{ needs.check-version.outputs.version }}
          path: release/*x64*.exe
          
      - name: Upload Windows ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-arm64-build-v${{ needs.check-version.outputs.version }}
          path: release/*arm64*.exe
          
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-v${{ needs.check-version.outputs.version }}
          path: release/*.AppImage